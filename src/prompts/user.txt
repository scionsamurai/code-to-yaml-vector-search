To create universal guidelines for converting code from any language to YAML, we need to focus on the common features and structures that exist across programming languages, while ensuring no actual code snippets appear in the output.

1. **File Metadata**: Include metadata about the file, such as a brief description of the file's purpose or contents. Always include this at the top.

```yaml
---
description: This file contains utility functions for data processing.
```

2.  **Function/Method Definitions**: For each function or method definition, include the **name**, **parameters**, **calls**, **return type**, and a brief **description** of its purpose **when applicable**. **Exclude** standard library calls, 'new' calls, inline functions, and in-block functions from this list. Crucially, **never include actual code implementation lines**.

```yaml
functions:
  - name: process_data
    parameters:
      - name: data
        type: list
        description: A list of data points to process
      - name: filter_threshold
        type: float
        description: The threshold value for filtering data
    return_type: list
    description: Filters and processes the input data based on the specified threshold.
    calls:
      - std::fs::create_dir_all
      - std::fs::write
      
```

3. **Class Definitions**: For each class definition, include the class name, inheritance information (if applicable), and a brief description of its purpose. Then, list the class methods and properties following the same guidelines as for functions. Never include implementation details or actual code lines.

```yaml
classes:
  - name: DataProcessor
    inherits: object
    description: A class for processing data.
    methods:
      # Method definitions here (no implementation code)
    properties:
      # Property definitions here (no implementation code)
```

4. **Code Comments**: Include relevant code comments as descriptions for functions, classes, variables, and other code elements, but never include the actual code lines these comments were attached to.

5. **Import Statements**: Do not include import statements in the YAML output. These are manually extracted and added separately when storing the output.

6. **Data Structures**: For complex data structures like dictionaries, lists, or custom objects, include their structure and a brief description of their purpose. Focus on structure definition, not initialization or usage code.

```yaml
data_structures:
  - name: person
    type: dict
    description: A dictionary representing a person's information.
    structure:
      name: str
      age: int
      contact:
        phone: str
        email: str
```

7. **Language-Specific Features**: If a particular language has unique features or constructs (e.g., decorators in Python, traits in Scala), include guidelines for representing them in the YAML representation without including the actual implementation code.

8. **Important Rule**: Never include actual source code lines, implementation details, or executable statements in the YAML output. The YAML should only contain metadata, descriptions, and structural information about the code, not the code itself.

These guidelines provide a solid foundation for converting code from any language to a consistent YAML format that focuses exclusively on code structure and documentation without including any actual implementation code lines. You can adjust and extend them as needed based on the specific requirements of the project presented and the languages involved, we want brevity but also completeness.
Do you understand?